

# This file was *autogenerated* from the file r.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_23 = Integer(23); _sage_const_0 = Integer(0); _sage_const_15 = Integer(15)
F = GF(_sage_const_2 )['x']
p = x**_sage_const_8  + x**_sage_const_4  + x**_sage_const_3  + x**_sage_const_2  + _sage_const_1 
FF = GF(_sage_const_2 **_sage_const_8 , modulus=p, names=('a',)); (a,) = FF._first_ngens(1)
#P.<c0, c1, c2, c3, c4, c5, c6, c7> = PolynomialRing(FF)

cl = bytes.fromhex("""
F3 BD 27 86 31 80 25 B9  61 6B A2 A9 B4 83 3E CA
49 23 96 70 ED 22 3C 17  10 70 5A BA 0C 6A 7C A5
8D 5B 99 D7 6B C2 02 7C  7F 0F 05 A5 64 4D 2A A4
62 0E 2A FF 56 83 28 97  5B 72 5B D7 EB 05 ED 6F
""")

for i in range(_sage_const_4 ):
    M = []
    ans_li = []
    for j in range(_sage_const_16 ):
        li = [FF.fetch_int(_sage_const_2 ) ** ((_sage_const_23  - k) * j) for k in range(_sage_const_8 )]
        M.append(li)
        res = FF.fetch_int(_sage_const_0 )
        for k in range(_sage_const_16 ):
            res += FF.fetch_int(cl[i*_sage_const_16 +j]) * FF.fetch_int(_sage_const_2 ) ** ((_sage_const_15  - k) * j)
        ans_li.append(res * -_sage_const_1 )
    ans = matrix(M).solve_right(vector(ans_li))
    for i in range(_sage_const_8 ):
        print(chr(ans[i].integer_representation()))

